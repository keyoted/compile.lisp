;(DEFVAR *EXECUTABLE-ARGS* (CDR SB-EXT:*POSIX-ARGV*))
(LET* (
        (*EXECUTABLE-ARGS* (CDR SB-EXT:*POSIX-ARGV*))
        (PRINT-HELP (LAMBDA ()
                  (LOOP FOR X IN *EXECUTABLE-ARGS* DO (IF (EQUAL X "-h")
                      (PROGN
                        (FORMAT T "COMPILE.LISP - COMPILE A LISP PROGRAM~%~%")
                        (FORMAT T "TO COMPILE COMPILE.LISP YOU MUST HAVE SBCL INSTALLED~%")
                        (FORMAT T "TO COMPILE COMPILE.LISP DO THE FOLOWING:~%")
                        (FORMAT T "    MAKE SURE THE FILE COMPILE.LISP IS IN YOUR CWD~%")
                        (FORMAT T "    RUN sbcl --script COMPILE.LISP~%")
                        (FORMAT T "    YOU SHOULD HAVE A COMPILE.LISP.X86 PROGRAM IN YOUR CWD~%")
                        (FORMAT T "    YOU CAN CHANGE THE NAME OF COMPILE.LISP.X86~%~%")
                        (FORMAT T "CAMMAND LINE ARGUMENTS FOR COMPILE.LISP.X86:~%")
                        (FORMAT T "   -h                PRINT THIS DIALOG AND QUIT~%")
                        (FORMAT T "   -IN FILE          SET FILE AS THE INPUT FILE TO BE COMPILED~%")
                        (FORMAT T "   -OUT FILE         SET FILE AS THE EXECUTABLE'S OUTPUT PATH~%")
                        (FORMAT T "   -ENTRY VAR        SET VAR AS THE ENTRY POINT FOR THE EXECUTABLE~%")
                        (FORMAT T "  NOTE: YOU MUST SPECIFY ONE OF THESE, OTHERWISE YOU WILL RECOMPILE COMPILE.LISP~%")
                        (QUIT))
                      NIL))))
        (EVERY-OTHER (LAMBDA (LS &OPTIONAL OFFSET)
                        (IF (EQ OFFSET NIL) 
                            (LOOP FOR X IN LS 
                                FOR I FROM 1 
                                IF (ODDP I) COLLECT X)
                            (LOOP FOR X IN (CDR LS) 
                                FOR I FROM 1 
                                IF (ODDP I) COLLECT X))))
        (MAKE-PAIRS-FROM-LIST (LAMBDA (LS TBL)
                                (LOOP FOR X IN (FUNCALL EVERY-OTHER LS)
                                      FOR Y IN (FUNCALL EVERY-OTHER LS T) 
                                      DO (SETF (GETHASH X TBL) Y))
                                TBL))
        (WRAP (LAMBDA (IN OUT ENTRY)
                  (FORMAT T "INPUT FILE: ~S~%OUTPUT FILE: ~S~%PROGRAM ENTRY POINT: ~S~%" IN OUT ENTRY)
                  (FORMAT T "LOADING: ~S...~%" IN)
                  (LOAD IN)
                  (IF (FBOUNDP (INTERN ENTRY)) 
                        () 
                        (PROGN
                            (FORMAT T "!!! CRITICAL ERROR: ~S IS UNDEFINED !!!~%" ENTRY)
                            (QUIT)))
                  (FORMAT T "WRITING EXE...~%")
                  (FORMAT T "GOOD BYE~%")
                  (SB-EXT:SAVE-LISP-AND-DIE OUT :TOPLEVEL (INTERN ENTRY) :EXECUTABLE T)))
        (START NIL)
        (ENTER-COMPILE (LAMBDA (IN OUT ENTRY)
                           (IF (OR IN OUT ENTRY) 
                                (FUNCALL WRAP (OR IN "IN.LISP") (OR OUT "OUT.EXE") (OR ENTRY "MAIN"))
                                (PROGN 
                                    (FORMAT T "*** WARNING: CREATING A COMPILER EXECUTABLE ***~%")
                                    (DEFUN *8E7F6HT48DEADTOME-COMPILE-LISP-MAIN* ()
                                        (FORMAT T "=== COMPILE.LISP ===~%")
                                        (SETQ *EXECUTABLE-ARGS* (CDR SB-EXT:*POSIX-ARGV*))
                                        (FUNCALL PRINT-HELP)
                                        (FUNCALL START)
                                    )
                                    (FORMAT T "*** NEW MAIN CREATED ***~%")
                                    (FORMAT T "WRITING EXE...~%")
                                    (FORMAT T "GOOD BYE~%")
                                    (SB-EXT:SAVE-LISP-AND-DIE "COMPILE.LISP.X86" :TOPLEVEL #'*8E7F6HT48DEADTOME-COMPILE-LISP-MAIN* :EXECUTABLE T)
                                )
                            )
                        )
        )
    )
    (SETF START (LAMBDA ()
                    (FORMAT T "ARGS: ~S~%" *EXECUTABLE-ARGS*)
                    (LET ((TBL (FUNCALL MAKE-PAIRS-FROM-LIST *EXECUTABLE-ARGS* (MAKE-HASH-TABLE :test 'equal))))
                        (FUNCALL ENTER-COMPILE (GETHASH "-IN" TBL) (GETHASH "-OUT" TBL) (GETHASH "-ENTRY" TBL)))
                    (QUIT)))
    (SB-EXT:DISABLE-DEBUGGER)
    (FUNCALL PRINT-HELP)
    (FUNCALL START))
